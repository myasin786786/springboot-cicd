# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Maven build and push to ECR

on:
  push:
    tags: [v*]

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.base_ref == 'refs/heads/master'

    steps:
      - run: echo ${{github.event.base_ref}}
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: "19"
          distribution: "temurin"
          cache: maven
      - name: Build with Maven
        run: mvn clean install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: public.ecr.aws/i8h0t4n9
          ECR_REPOSITORY: sadapay-interview
          IMAGE_TAG: ${{github.ref_name}}
        run: |
          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Setup SSH with EC2
        env:
          KEY_FILE: ${{secrets.ACCESS_KEY_FILE}}
          DEPLOYMENT_IP: ${{secrets.DEPLOYMENT_IP}}
        run: |
          mkdir -p ~/.ssh/
          echo '${{env.KEY_FILE}}' > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          echo '${{env.DEPLOYMENT_IP}}' > ~/.ssh/known_hosts
          sudo chmod 600 ~/.ssh/known_hosts

      - name: SSH into instance
        env:
          DEPLOYMENT_IP: ${{secrets.DEPLOYMENT_IP}}
          USER : ${{secrets.SSH_USER}}
          ECR_REGISTRY: public.ecr.aws/i8h0t4n9
          ECR_REPOSITORY: sadapay-interview
          IMAGE_TAG: ${{ github.ref_name }}
          PORT: "8080"
        run: |
          cat ~/.ssh/key.pem
          
          ssh -i ~/.ssh/key.pem -o StrictHostKeyChecking=no ${{env.USER}}@${{env.DEPLOYMENT_IP}}  << EOF
            sudo docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            sudo docker stop ${{ env.ECR_REPOSITORY }}
            sudo docker rm -f ${{ env.ECR_REPOSITORY }}
            sudo docker image tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.ECR_REPOSITORY }}:latest
            sudo docker run -p ${{env.PORT}}:8080 --name ${{ env.ECR_REPOSITORY }} ${{ env.ECR_REPOSITORY }}:latest  
          EOF
